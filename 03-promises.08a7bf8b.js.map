{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,UAE9BC,MAACC,EAAKC,KAAEC,EAAIC,OAAEC,GAAUR,EAAKS,SA0BnC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAED,OAC5B,IAAIC,QADTH,EACiB,CAACI,EAASC,KAC3BD,EAAQ,qBAAqBN,QAAeC,I,EAG7B,CAACK,EAASC,KACzBA,EAAO,oBAAoBP,QAAeC,I,GAlCZZ,EAA/BmB,iBAAiB,UAEQ,SAAHC,GAEzB,IAAIC,EAAaC,OAAOlB,EAAMmB,OAC1BC,EAAWF,OAAOhB,EAAKiB,OACvBE,EAAQH,OAAOlB,EAAMmB,OAGqC,IAAzD,IAAIG,EAAI,EAAGA,GAAKJ,OAAOd,EAAOe,OAAQG,GAAK,EAC9CC,YAAW,KAEKjB,EAAcgB,EAAID,GAE7BG,MAAML,IAAYzB,EAAA+B,OAAOC,QAAQP,EAAM,IACsEQ,OAAtGC,IAAYlC,EAAA+B,OAAOI,QAAQD,EAAM,IACkEP,GAApGD,CAAQ,GAEhBH,GACuCA,GAA5BG,EAEhBJ,EAAMc,iBACkClC,EAAnCmC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio'; // Імпортуємо бібліотеку notiflix\n\nconst form = document.querySelector('.form') // Отримуємо доступ до до тегу form через селектор класу form\n\nconst {delay, step, amount} = form.elements // Робимо деструктуризацію елементів форми \nform.addEventListener('submit', startCreatPromise) // Додаємо прослуховувач події submit на тег form\n\nfunction startCreatPromise(event) { // Функція що запускає створення промісів \n  \n  let firstDelay = Number(delay.value); // Створюємо змінну що буде приймати значення часу створення першого промісу та на кожній ітерації буде збільшуватись на значення змінної stepTime\n  let stepTime = Number(step.value); // Створюємо змінну що буде приймати значення часу проміжку для створення наступного промісу\n  let count = Number(delay.value); // Створюєммо змінну лічильник що буде приймати та передавати час затримки \n  \n\n  for (let i = 1; i <= Number(amount.value); i += 1) { // Перебераєммо за допомогою цикла for значення amount\n    setTimeout(() => { // На кожній ітерації створюємо таймер відкладеної подіїї куди передаємо значення firstDelay\n\n      let promise = createPromise(i, (count)); // Викликаєммо функцію createPromise через змінну promise яка викликає створення нового промісу на кожній ітерації(передаємо значення позиції та часу відкладенного створення) \n      promise\n        .then((value) => { Notify.success(value) }) // Отримуємо позитивний результат виконання промісу зі створенного промісу та викликаємо бібліотеку Notify з відповідним результатом\n        .catch((error) => { Notify.failure(error) }) // Отримуємо негативний результат виконання промісу зі створенного промісу та викликаємо бібліотеку Notify з відповідним результатом\n      count += stepTime; // Додаєммо лічильнику значення step на кожній ітерації \n\n    }, firstDelay); // Змінна що задає значення відкладеної функції setTimeout в Мс\n    firstDelay += stepTime; // Додаєммо firstDelay  значення step на кожній ітерації \n  };\n  event.preventDefault(); // Скидаємо поведінку браузера за замовчуванням \n  form.reset(); // Очищуємо поля вводу form\n};\n\nfunction createPromise(position, delay) { // Функція створює нові проміси \n  const shouldResolve = Math.random() > 0.3; // Використовуємо генератор рандомних чисел \n\n  if (shouldResolve) { // Якщо в змінній значення числа більше 0,3 то створюємо проміс з позитивним результатом \n    return new Promise((resolve, reject) => { // Повертаємо проміс з позитивним результатом \n      resolve(`Fulfilled promise ${position} in ${delay}`) // Записуємо значення отриманні при виклику промісу position, delay в її значення \n})\n  } else { // Якщо в змінній значення числа менше 0,3 то створюємо проміс з негативним результатом \n  return new Promise((resolve, reject) => { // Повертаємо проміс з негативним результатом \n      reject(`Rejected promise ${position} in ${delay}`) // Записуємо значення отриманні при виклику промісу position, delay в її значення \n})\n  }\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","delay","$47d4ff9957288465$var$delay","step","$47d4ff9957288465$var$step","amount","$47d4ff9957288465$var$amount","elements","$47d4ff9957288465$var$createPromise","position","delay1","shouldResolve","Math","random","Promise","resolve","reject","addEventListener","event","firstDelay","Number","value","stepTime","count","i","setTimeout","then","Notify","success","catch","error","failure","preventDefault","reset"],"version":3,"file":"03-promises.08a7bf8b.js.map"}