{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAENC,EAAAH,EAAKI,SAA5BC,EAAuBF,EAAvBG,MAAOC,EAAgBJ,EAAhBK,KAAMC,EAAUN,EAAVO,OACgBV,EAA/BW,iBAAiB,UAEQ,SAAHC,G,kBAQvBC,YAAW,WAET,IAWiBC,EAAUC,GAAVD,EAXWE,EAWDD,EAXKE,EAYdC,KAAKC,SAAW,GAG7B,IAAIC,SAAQ,SAACC,EAASC,GAC3BD,EAAQ,qBAAoCE,OAAfT,EAAS,QAAYS,OAANR,G,IAGzC,IAAIK,SAAQ,SAACC,EAASC,GACzBA,EAAO,oBAAmCC,OAAfT,EAAS,QAAYS,OAANR,G,KAlBvCS,MAAK,SAACC,GAAY3B,EAAA4B,OAAOC,QAAQF,E,IAC4EG,OAAvG,SAACC,GAAY/B,EAAA4B,OAAOI,QAAQD,E,IACwEZ,GAApGc,C,GAERC,GACuCA,GAA5BD,C,EAhBhBnB,EAAMqB,iBAKN,IAJA,IAAID,EAAaE,OAAO7B,EAAMoB,OAC1BM,EAAWG,OAAO3B,EAAKkB,OACvBR,EAAQiB,OAAO7B,EAAMoB,OAEhBU,EAAI,EAAGA,GAAKD,OAAOzB,EAAOgB,OAAQU,GAAK,EAACC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio'; // Імпортуємо бібліотеку notiflix\n\nconst form = document.querySelector('.form') // Отримуємо доступ до до тегу form через селектор класу form\n\nconst {delay, step, amount} = form.elements // Робимо деструктуризацію елементів форми \nform.addEventListener('submit', startCreatPromise) // Додаємо прослуховувач події submit на тег form\n\nfunction startCreatPromise(event) { // Функція що запускає створення промісів \n  event.preventDefault(); // Скидаємо поведінку браузера за замовчуванням \n  let firstDelay = Number(delay.value); // Створюємо змінну що буде приймати значення часу створення першого промісу та на кожній ітерації буде збільшуватись на значення змінної stepTime\n  let stepTime = Number(step.value); // Створюємо змінну що буде приймати значення часу проміжку для створення наступного промісу\n  let count = Number(delay.value); // Створюєммо змінну лічильник що буде приймати та передавати час затримки \n\n  for (let i = 1; i <= Number(amount.value); i += 1) { // Перебераєммо за допомогою цикла for значення amount\n\n    setTimeout(() => { // На кожній ітерації створюємо таймер відкладеної подіїї куди передаємо значення firstDelay\n\n      let promise = createPromise(i, (count)); // Викликаєммо функцію createPromise через змінну promise яка викликає створення нового промісу на кожній ітерації(передаємо значення позиції та часу відкладенного створення) \n      promise\n        .then((value) => { Notify.success(value) }) // Отримуємо позитивний результат виконання промісу зі створенного промісу та викликаємо бібліотеку Notify з відповідним результатом\n        .catch((error) => { Notify.failure(error) }) // Отримуємо негативний результат виконання промісу зі створенного промісу та викликаємо бібліотеку Notify з відповідним результатом\n      count += stepTime; // Додаєммо лічильнику значення step на кожній ітерації \n\n    }, firstDelay); // Змінна що задає значення відкладеної функції setTimeout в Мс\n    firstDelay += stepTime; // Додаєммо firstDelay  значення step на кожній ітерації \n  };\n};\n\nfunction createPromise(position, delay) { // Функція створює нові проміси \n  const shouldResolve = Math.random() > 0.3; // Використовуємо генератор рандомних чисел \n\n  if (shouldResolve) { // Якщо в змінній значення числа більше 0,3 то створюємо проміс з позитивним результатом \n    return new Promise((resolve, reject) => { // Повертаємо проміс з позитивним результатом \n      resolve(`Fulfilled promise ${position} in ${delay}`) // Записуємо значення отриманні при виклику промісу position, delay в її значення \n})\n  } else { // Якщо в змінній значення числа менше 0,3 то створюємо проміс з негативним результатом \n  return new Promise((resolve, reject) => { // Повертаємо проміс з негативним результатом \n      reject(`Rejected promise ${position} in ${delay}`) // Записуємо значення отриманні при виклику промісу position, delay в її значення \n})\n  }\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$_elements","elements","$ce04d3a99e08e73b$var$delay","delay","$ce04d3a99e08e73b$var$step","step","$ce04d3a99e08e73b$var$amount","amount","addEventListener","event","setTimeout","position","delay1","i","count","Math","random","Promise","resolve","reject","concat","then","value","Notify","success","catch","error","failure","stepTime","firstDelay","preventDefault","Number","i1","_loop"],"version":3,"file":"03-promises.c6bf385a.js.map"}